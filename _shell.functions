function brewSourceIfPresent
{
    if hash brew 2>/dev/null
    then
        file="$(brew --prefix)/$1"

        if [ -s "$file" ]
        then
            echo "sourcing shared brew file $file"
            source "$file"
        fi
    else
        echo Not Brewing
    fi
}

function SetenvDir
{ 
	eval "$1='$2' export $1";
	if [ ! -d $2 ]
	then
		$ECHO "$0: SetenvDir: warning: $2 does not exist"
	fi
}

function Setenv
{ 
	eval "$1='$2' export $1";
}

function Addpath
{
	PATH=$PATH:$1 export PATH
	if [ ! -d $1 ]
	then
		$ECHO "$0: Addpath: warning: $1 does not exist"
	fi
}

function AddpathIfPresent
{
	if [ -d $1 ]
	then
    	PATH=$PATH:$1 export PATH
	fi
}

function Addlpath
{
	LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$1 export LD_LIBRARY_PATH
	if [ ! -d $1 ]
	then
		$ECHO "$0: Addlpath: warning: $1 does not exist"
	fi
}

function AddClassPath
{
	CLASSPATH=$CLASSPATH:$1 export CLASSPATH

	if [ ! -f $1 ]
	then 
		$ECHO "$0: AddClassPath: warning: $1 does not exist"
	fi
}

function Addman
{
	MANPATH=$MANPATH:$1 export MANPATH

	if [ ! -d $1 ]
	then
		$ECHO "$0: Addman: warning: $1 does not exist"
	fi
}

function newf
{
	ls -lthF "$@" | head -25
}

function mcd
{
    mkdir -p $1
    cd $1
}

function scd
{
	### alias scd="set mydir=`pwd`;cd `echo $mydir | sed "s/\!:1/\!:2/"`"### alias mcd="mkdir -p \!* ; cd \!*"
	mydir=$(pwd)
	newdir=$(echo $mydir | sed "s/$1/$2/")

	echo cd $newdir
	cd $newdir
}

# http://transfer.sh
#
function transfer
{
    if [ $# -eq 0 ]
    then
		echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
		return 1
    fi 
    tmpfile=$( mktemp -t transferXXX )
    if tty -s
    then
		basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
		curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
    else 
		curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile 
    fi
    cat $tmpfile
	echo ""
    rm -f $tmpfile
}

function usage
{
    if command -v gsort >/dev/null 2>&1
    then
	SORT=gsort
    else
	SORT=cat
    fi

    du -hcs $1* | $SORT
}

function checkUpToDate
{
    local status
    
    local today=$(date "+%d")
    local marker=$HOME/.unixEnvStatus
    local wrapper=""
    
    
    # if the marker is older than a day
    #
    local count=$( (find $marker -mtime 1 | wc -l) 2> /dev/null )

    if [ ! -f "$marker" ] || [ ${count} -gt 0 ]
    then
        cd $UNIX_ENV_DIR
        status="Unix Env $(${UNIX_ENV_DIR}/bin/gitstatus.sh)"
        cd - > /dev/null
        
        if [ $? -ne 0 ]
        then
            wrapper="#######################################################\n"
        fi

	rm $marker        
        [ -n "$wrapper" ] && echo $wrapper > $marker
        echo $status >> $marker
        [ -n "$wrapper" ] && echo $wrapper >> $marker

    fi
    cat $marker
}

# File System JQ
function fsj
{
    file="$1"
    
    if [ -f "$file" ]
    then
	tmpfile=$(mktemp)
	jq . "$file" > $tmpfile
	if [ $? -eq 0 ]
	then
	    mv $tmpfile "$file"
	else
	    echo "JQ Failed"
	fi
    fi
}
