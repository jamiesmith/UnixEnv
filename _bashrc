# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

##################################################
# Odds are you want to edit profile, not this.
##################################################

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

echo "##################################################"
echo "##################################################"
echo "#####           IN BASHRC                    #####"
echo "##################################################"
echo "##################################################"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
#
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
#
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]
then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null
    then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]
then
    PS1="\[$(tput bold)\]\[\e[7m\]\u@\h\[$(tput sgr0)\][\t]:\[$(tput bold)\]\w \\$ >\[$(tput sgr0)\]\[$(tput sgr0)\]"
else
    PS1="\[$(tput bold)\]\[\e[7m\]\u@\h\[$(tput sgr0)\][\t]:\[$(tput bold)\]\w \\$ >\[$(tput sgr0)\]\[$(tput sgr0)\]"
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[$(tput bold)\]\e[7m\u@\h\e[m\[$(tput sgr0)\][\t]:\[$(tput bold)\]\w % >\[$(tput sgr0)\]\[$(tput sgr0)\]"
    ;;
*)
    ;;
esac

# Local personalizations
#
function Addpath
{
    PATH=$PATH:$1 export PATH
    if [ ! -d $1 ]
    then
	echo "$0: Addpath: warning: $1 does not exist"
    fi
}

bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

function sourceIfPresent
{
    file=$1
    if [ -s "$file" ]
    then
	echo "sourcing shared file $file"
	source $file
    fi
}

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

echo leaving bashrc

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/jamie.smith/Downloads/google-cloud-sdk/path.bash.inc' ]; then . '/Users/jamie.smith/Downloads/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/jamie.smith/Downloads/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/jamie.smith/Downloads/google-cloud-sdk/completion.bash.inc'; fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
